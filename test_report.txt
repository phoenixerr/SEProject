Test Report
==================================================

    API: [POST] /debug/db_populate
    Inputs: {}
    Expected Output: Status Code 200, {'message': 'Database populated'}
    Actual Output: Status Code 200, {'message': 'Database populated'}
    Result: Success
    
    API: [GET] /assignment/1
    Inputs: {}
    Expected Output: Status Code 200, {'id': 1, 'title': 'GA1', 'is_graded': True, 'due_date': '2024-08-01T23:59:59', 'week_id': 1}
    Actual Output: Status Code 200, {'id': 1, 'title': 'GA1', 'is_graded': True, 'due_date': '2024-08-01T23:59:59', 'week_id': 1}
    Result: Success
    
    API: [PUT] /assignment/1
    Inputs: {'id': 1, 'title': 'GA1', 'is_graded': True, 'due_date': '2024-08-01 23:59:59', 'week_id': 1}
    Expected Output: Status Code 200, {'id': 1, 'title': 'GA1', 'is_graded': True, 'due_date': '2024-08-01 23:59:59', 'week_id': 1}
    Actual Output: Status Code 200, {'id': 1, 'title': 'GA1', 'is_graded': True, 'due_date': '2024-08-01T23:59:59', 'week_id': 1}
    Result: Fail
    
    API: [GET] /week/1/assignments
    Inputs: {}
    Expected Output: Status Code 200, [{'id': 1, 'title': 'GA1', 'is_graded': True, 'due_date': '2024-08-01T23:59:59', 'week_id': 1}]
    Actual Output: Status Code 200, [{'id': 1, 'title': 'GA1', 'is_graded': True, 'due_date': '2024-08-01T23:59:59', 'week_id': 1}]
    Result: Success
    
    API: [GET] /assignment/1/questions
    Inputs: {}
    Expected Output: Status Code 200, [{'id': 1, 'text': 'What is the data type of the following variable in Python?\nmy_var = "Hello, World!"', 'is_msq': False, 'assignment_id': 1}, {'id': 2, 'text': 'Which of the following is used to define a multi-line comment in Python?', 'is_msq': False, 'assignment_id': 1}]
    Actual Output: Status Code 200, [{'id': 1, 'text': 'What is the data type of the following variable in Python?\nmy_var = "Hello, World!"', 'is_msq': False, 'assignment_id': 1}, {'id': 2, 'text': 'Which of the following is used to define a multi-line comment in Python?', 'is_msq': False, 'assignment_id': 1}]
    Result: Success
    
    API: [POST] /assignment/1/questions
    Inputs: {'errors': {'text': 'Text of the question Missing required parameter in the JSON body or the post body or the query string'}, 'message': 'Input payload validation failed'}
    Expected Output: Status Code 400, {'id': 1, 'errors': {'text': 'Text of the question Missing required parameter in the JSON body or the post body or the query string'}, 'message': 'Input payload validation failed'}
    Actual Output: Status Code 400, {'errors': {'text': 'Text of the question Missing required parameter in the JSON body or the post body or the query string'}, 'message': 'Input payload validation failed'}
    Result: Fail
    
    API: [GET] /chats
    Inputs: {}
    Expected Output: Status Code 200, []
    Actual Output: Status Code 200, []
    Result: Success
    
    API: [DELETE] /chats
    Inputs: {}
    Expected Output: Status Code 200, {'message': 'Chats deleted'}
    Actual Output: Status Code 200, {'message': 'Chats deleted'}
    Result: Success
    
    API: [GET] /course/1
    Inputs: {}
    Expected Output: Status Code 200, {'name': 'Programming in Python', 'level': 1, 'summary': None}
    Actual Output: Status Code 200, {'name': 'Programming in Python', 'level': 1, 'summary': None}
    Result: Success
    
    API: [PUT] /course/1
    Inputs: {'name': 'Programming in Python', 'level': 1, 'summary': 'This course is about programming in Python'}
    Expected Output: Status Code 200, {'name': 'Programming in Python', 'level': 1, 'summary': 'This course is about programming in Python'}
    Actual Output: Status Code 200, {'name': 'Programming in Python', 'level': 1, 'summary': 'This course is about programming in Python'}
    Result: Success
    
    API: [GET] /course/1/chats
    Inputs: {}
    Expected Output: Status Code 200, [{'id': 1, 'prompt': 'How do you swap the values of two variables in Python without using a temporary variable?', 'response': 'Use tuple unpacking: a, b = b, a', 'datetime': '2024-07-28T20:50:59', 'user_id': 2, 'course_id': 1}, {'id': 2, 'prompt': 'What is the difference between a list and a tuple in Python?', 'response': 'Lists are mutable (can be changed), while tuples are immutable (cannot be changed).', 'datetime': '2024-07-28T20:52:59', 'user_id': 2, 'course_id': 1}, {'id': 3, 'prompt': 'How do you check if a string is a palindrome in Python?', 'response': "Reverse the string and compare it to the original string. If they are equal, it's a palindrome.", 'datetime': '2024-07-28T20:51:59', 'user_id': 3, 'course_id': 1}, {'id': 4, 'prompt': 'Explain the use of the enumerate() function in Python.', 'response': 'enumerate() adds a counter to an iterable and returns it as an enumerate object.', 'datetime': '2024-07-28T20:53:59', 'user_id': 3, 'course_id': 1}]
    Actual Output: Status Code 200, [{'id': 1, 'prompt': 'How do you swap the values of two variables in Python without using a temporary variable?', 'response': 'Use tuple unpacking: a, b = b, a', 'datetime': '2024-07-28T20:50:59', 'user_id': 2, 'course_id': 1}, {'id': 2, 'prompt': 'What is the difference between a list and a tuple in Python?', 'response': 'Lists are mutable (can be changed), while tuples are immutable (cannot be changed).', 'datetime': '2024-07-28T20:52:59', 'user_id': 2, 'course_id': 1}, {'id': 3, 'prompt': 'How do you check if a string is a palindrome in Python?', 'response': "Reverse the string and compare it to the original string. If they are equal, it's a palindrome.", 'datetime': '2024-07-28T20:51:59', 'user_id': 3, 'course_id': 1}, {'id': 4, 'prompt': 'Explain the use of the enumerate() function in Python.', 'response': 'enumerate() adds a counter to an iterable and returns it as an enumerate object.', 'datetime': '2024-07-28T20:53:59', 'user_id': 3, 'course_id': 1}]
    Result: Success
    
    API: [DELETE] /course/1/chats
    Inputs: {}
    Expected Output: Status Code 200, {'message': 'Chats deleted'}
    Actual Output: Status Code 200, {'message': 'Chats deleted'}
    Result: Success
    
    API: [GET] /course/1/events
    Inputs: {}
    Expected Output: Status Code 200, []
    Actual Output: Status Code 200, []
    Result: Success
    
    API: [POST] /course/1/events
    Inputs: {'title': 'OPPE due', 'start': '2024-08-01 23:59:59', 'end': '2024-08-04 23:59:59'}
    Expected Output: Status Code 200, {'id': 5, 'title': 'OPPE due', 'start': '2024-08-01T23:59:59', 'end': '2024-08-04T23:59:59', 'course_id': 1, 'user_id': 1}
    Actual Output: Status Code 200, {'id': 5, 'title': 'OPPE due', 'start': '2024-08-01T23:59:59', 'end': '2024-08-04T23:59:59', 'course_id': 1, 'user_id': 1}
    Result: Success
    
    API: [GET] /course/1/students
    Inputs: {}
    Expected Output: Status Code 200, [{'id': 2, 'cgpa': 8.5}, {'id': 3, 'cgpa': 8.5}, {'id': 4, 'cgpa': 8.5}, {'id': 5, 'cgpa': 8.5}]
    Actual Output: Status Code 200, [{'id': 2, 'cgpa': 8.5}, {'id': 3, 'cgpa': 8.5}, {'id': 4, 'cgpa': 8.5}, {'id': 5, 'cgpa': 8.5}]
    Result: Success
    
    API: [GET] /course/1/weeks
    Inputs: {}
    Expected Output: Status Code 200, [{'id': 1, 'number': 1, 'course_id': 1, 'summary': 'Basics of python'}, {'id': 2, 'number': 2, 'course_id': 1, 'summary': 'Using Replit'}, {'id': 3, 'number': 3, 'course_id': 1, 'summary': 'Datatypes in python'}]
    Actual Output: Status Code 200, [{'id': 1, 'number': 1, 'course_id': 1, 'summary': 'Basics of python'}, {'id': 2, 'number': 2, 'course_id': 1, 'summary': 'Using Replit'}, {'id': 3, 'number': 3, 'course_id': 1, 'summary': 'Datatypes in python'}]
    Result: Success
    
    API: [POST] /course/1/weeks
    Inputs: {'errors': {'course_id': 'Course ID Missing required parameter in the JSON body or the post body or the query string'}, 'message': 'Input payload validation failed'}
    Expected Output: Status Code 400, {'id': 1, 'errors': {'course_id': 'Course ID Missing required parameter in the JSON body or the post body or the query string'}, 'message': 'Input payload validation failed'}
    Actual Output: Status Code 400, {'errors': {'number': 'Number of the week Missing required parameter in the JSON body or the post body or the query string'}, 'message': 'Input payload validation failed'}
    Result: Fail
    
    API: [GET] /courses
    Inputs: {}
    Expected Output: Status Code 200, [{'name': 'Programming in Python', 'level': 1, 'summary': 'This course is about programming in Python'}, {'name': 'System Commands', 'level': 2, 'summary': None}, {'name': 'Programming, Data Structures and Algorithms', 'level': 2, 'summary': None}, {'name': 'Modern Application Development I', 'level': 2, 'summary': None}]
    Actual Output: Status Code 200, [{'name': 'Programming in Python', 'level': 1, 'summary': 'This course is about programming in Python'}, {'name': 'System Commands', 'level': 2, 'summary': None}, {'name': 'Programming, Data Structures and Algorithms', 'level': 2, 'summary': None}, {'name': 'Modern Application Development I', 'level': 2, 'summary': None}]
    Result: Success
    
    API: [POST] /courses
    Inputs: {'name': 'Programming in Python', 'level': 1, 'summary': 'This course is about programming in Python'}
    Expected Output: Status Code 200, {'id': 1, 'name': 'Programming in Python', 'level': 1, 'summary': 'This course is about programming in Python'}
    Actual Output: Status Code 200, {'name': 'Programming in Python', 'level': 1, 'summary': 'This course is about programming in Python'}
    Result: Fail
    
    API: [GET] /event/1
    Inputs: {}
    Expected Output: Status Code 401, {'message': 'Unauthorized'}
    Actual Output: Status Code 401, {'message': 'Unauthorized'}
    Result: Success
    
    API: [PUT] /event/1
    Inputs: {'title': 'OPPE due', 'start': '2024-08-01 23:59:59', 'end': '2024-08-04 23:59:59'}
    Expected Output: Status Code 401, {'message': 'Unauthorized'}
    Actual Output: Status Code 401, {'message': 'Unauthorized'}
    Result: Success
    
    API: [GET] /instructor/10
    Inputs: {}
    Expected Output: Status Code 200, {'id': 10}
    Actual Output: Status Code 200, {'id': 10}
    Result: Success
    
    API: [GET] /instructor/10/teach/1
    Inputs: {}
    Expected Output: Status Code 200, {'course_id': 1, 'user_id': 10}
    Actual Output: Status Code 200, {'course_id': 1, 'user_id': 10}
    Result: Success
    
    API: [POST] /instructor/10/teach/1
    Inputs: {'course_id': 1, 'instructor_id': 1}
    Expected Output: Status Code 400, {'message': 'Instructor already teaching course'}
    Actual Output: Status Code 400, {'message': 'Instructor already teaching course'}
    Result: Success
    
    API: [DELETE] /instructor/10/teach/1
    Inputs: {}
    Expected Output: Status Code 200, {'message': 'Teaching removed'}
    Actual Output: Status Code 200, {'message': 'Teaching removed'}
    Result: Success
    
    API: [GET] /instructors
    Inputs: {}
    Expected Output: Status Code 200, [{'id': 9}, {'id': 10}, {'id': 11}, {'id': 12}]
    Actual Output: Status Code 200, [{'id': 9}, {'id': 10}, {'id': 11}, {'id': 12}]
    Result: Success
    
    API: [POST] /instructors
    Inputs: {'name': 'Instructor Name'}
    Expected Output: Status Code 401, {'message': 'User is an admin'}
    Actual Output: Status Code 401, {'message': 'User is an admin'}
    Result: Success
    
    API: [GET] /lecture/1
    Inputs: {}
    Expected Output: Status Code 200, {'id': 1, 'week_id': 1, 'title': 'Introduction to python', 'url': 'https://www.youtube.com/watch?v=8ndsDXohLMQ&list=PLDsnL5pk7-N_9oy2RN4A65Z-PEnvtc7rf', 'summary': "Summary of the lecture 'Intro to python'"}
    Actual Output: Status Code 200, {'id': 1, 'week_id': 1, 'title': 'Introduction to python', 'url': 'https://www.youtube.com/watch?v=8ndsDXohLMQ&list=PLDsnL5pk7-N_9oy2RN4A65Z-PEnvtc7rf', 'summary': "Summary of the lecture 'Intro to python'"}
    Result: Success
    
    API: [DELETE] /event/1
    Inputs: {}
    Expected Output: Status Code 401, {'message': 'Unauthorized'}
    Actual Output: Status Code 401, {'message': 'Unauthorized'}
    Result: Success
    
    API: [DELETE] /instructor/1
    Inputs: {}
    Expected Output: Status Code 401, {'message': 'Instructor not found'}
    Actual Output: Status Code 401, {'message': 'Instructor not found'}
    Result: Success
    
    API: [DELETE] /lecture/1
    Inputs: {}
    Expected Output: Status Code 200, {'message': 'Lecture deleted'}
    Actual Output: Status Code 200, {'message': 'Lecture deleted'}
    Result: Success
    